# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type TimeSheet {
  id: ID!
  labourTime: Int
  jobNumber: String
  employeeID: Employee
  description: String
  costCode: String
  submitStatus: String
  timeSheetDate: CalendarDay
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TimeSheetWhereUniqueInput {
  id: ID
  timeSheetDate: CalendarDay
}

input TimeSheetWhereInput {
  AND: [TimeSheetWhereInput!]
  OR: [TimeSheetWhereInput!]
  NOT: [TimeSheetWhereInput!]
  id: IDFilter
  labourTime: IntNullableFilter
  jobNumber: StringFilter
  employeeID: EmployeeWhereInput
  description: StringFilter
  costCode: StringFilter
  submitStatus: StringNullableFilter
  timeSheetDate: CalendarDayNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input TimeSheetOrderByInput {
  id: OrderDirection
  labourTime: OrderDirection
  jobNumber: OrderDirection
  description: OrderDirection
  costCode: OrderDirection
  submitStatus: OrderDirection
  timeSheetDate: OrderDirection
}

input TimeSheetUpdateInput {
  labourTime: Int
  jobNumber: String
  employeeID: EmployeeRelateToOneForUpdateInput
  description: String
  costCode: String
  submitStatus: String
  timeSheetDate: CalendarDay
}

input EmployeeRelateToOneForUpdateInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
  disconnect: Boolean
}

input TimeSheetUpdateArgs {
  where: TimeSheetWhereUniqueInput!
  data: TimeSheetUpdateInput!
}

input TimeSheetCreateInput {
  labourTime: Int
  jobNumber: String
  employeeID: EmployeeRelateToOneForCreateInput
  description: String
  costCode: String
  submitStatus: String
  timeSheetDate: CalendarDay
}

input EmployeeRelateToOneForCreateInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
}

type Employee {
  id: ID!
  firstName: String
  LastName: String
  password: String
  timeSheet(where: TimeSheetWhereInput! = {}, orderBy: [TimeSheetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimeSheetWhereUniqueInput): [TimeSheet!]
  timeSheetCount(where: TimeSheetWhereInput! = {}): Int
}

input EmployeeWhereUniqueInput {
  id: ID
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: IDFilter
  firstName: StringFilter
  LastName: StringFilter
  password: StringFilter
  timeSheet: TimeSheetManyRelationFilter
}

input TimeSheetManyRelationFilter {
  every: TimeSheetWhereInput
  some: TimeSheetWhereInput
  none: TimeSheetWhereInput
}

input EmployeeOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  LastName: OrderDirection
  password: OrderDirection
}

input EmployeeUpdateInput {
  firstName: String
  LastName: String
  password: String
  timeSheet: TimeSheetRelateToManyForUpdateInput
}

input TimeSheetRelateToManyForUpdateInput {
  disconnect: [TimeSheetWhereUniqueInput!]
  set: [TimeSheetWhereUniqueInput!]
  create: [TimeSheetCreateInput!]
  connect: [TimeSheetWhereUniqueInput!]
}

input EmployeeUpdateArgs {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateInput!
}

input EmployeeCreateInput {
  firstName: String
  LastName: String
  password: String
  timeSheet: TimeSheetRelateToManyForCreateInput
}

input TimeSheetRelateToManyForCreateInput {
  create: [TimeSheetCreateInput!]
  connect: [TimeSheetWhereUniqueInput!]
}

type CostCode {
  id: ID!
  productionCode: String
  productionCodeDescription: String
}

input CostCodeWhereUniqueInput {
  id: ID
}

input CostCodeWhereInput {
  AND: [CostCodeWhereInput!]
  OR: [CostCodeWhereInput!]
  NOT: [CostCodeWhereInput!]
  id: IDFilter
  productionCode: StringFilter
  productionCodeDescription: StringFilter
}

input CostCodeOrderByInput {
  id: OrderDirection
  productionCode: OrderDirection
  productionCodeDescription: OrderDirection
}

input CostCodeUpdateInput {
  productionCode: String
  productionCodeDescription: String
}

input CostCodeUpdateArgs {
  where: CostCodeWhereUniqueInput!
  data: CostCodeUpdateInput!
}

input CostCodeCreateInput {
  productionCode: String
  productionCodeDescription: String
}

type JobNumber {
  id: ID!
  jobNumber: String
}

input JobNumberWhereUniqueInput {
  id: ID
}

input JobNumberWhereInput {
  AND: [JobNumberWhereInput!]
  OR: [JobNumberWhereInput!]
  NOT: [JobNumberWhereInput!]
  id: IDFilter
  jobNumber: StringFilter
}

input JobNumberOrderByInput {
  id: OrderDirection
  jobNumber: OrderDirection
}

input JobNumberUpdateInput {
  jobNumber: String
}

input JobNumberUpdateArgs {
  where: JobNumberWhereUniqueInput!
  data: JobNumberUpdateInput!
}

input JobNumberCreateInput {
  jobNumber: String
}

type TimeClock {
  id: ID!
  timeStamp: DateTime
  timeIn: String
  timeOut: String
}

input TimeClockWhereUniqueInput {
  id: ID
}

input TimeClockWhereInput {
  AND: [TimeClockWhereInput!]
  OR: [TimeClockWhereInput!]
  NOT: [TimeClockWhereInput!]
  id: IDFilter
  timeStamp: DateTimeNullableFilter
  timeIn: StringFilter
  timeOut: StringFilter
}

input TimeClockOrderByInput {
  id: OrderDirection
  timeStamp: OrderDirection
  timeIn: OrderDirection
  timeOut: OrderDirection
}

input TimeClockUpdateInput {
  timeStamp: DateTime
  timeIn: String
  timeOut: String
}

input TimeClockUpdateArgs {
  where: TimeClockWhereUniqueInput!
  data: TimeClockUpdateInput!
}

input TimeClockCreateInput {
  timeStamp: DateTime
  timeIn: String
  timeOut: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTimeSheet(data: TimeSheetCreateInput!): TimeSheet
  createTimeSheets(data: [TimeSheetCreateInput!]!): [TimeSheet]
  updateTimeSheet(where: TimeSheetWhereUniqueInput!, data: TimeSheetUpdateInput!): TimeSheet
  updateTimeSheets(data: [TimeSheetUpdateArgs!]!): [TimeSheet]
  deleteTimeSheet(where: TimeSheetWhereUniqueInput!): TimeSheet
  deleteTimeSheets(where: [TimeSheetWhereUniqueInput!]!): [TimeSheet]
  createEmployee(data: EmployeeCreateInput!): Employee
  createEmployees(data: [EmployeeCreateInput!]!): [Employee]
  updateEmployee(where: EmployeeWhereUniqueInput!, data: EmployeeUpdateInput!): Employee
  updateEmployees(data: [EmployeeUpdateArgs!]!): [Employee]
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployees(where: [EmployeeWhereUniqueInput!]!): [Employee]
  createCostCode(data: CostCodeCreateInput!): CostCode
  createCostCodes(data: [CostCodeCreateInput!]!): [CostCode]
  updateCostCode(where: CostCodeWhereUniqueInput!, data: CostCodeUpdateInput!): CostCode
  updateCostCodes(data: [CostCodeUpdateArgs!]!): [CostCode]
  deleteCostCode(where: CostCodeWhereUniqueInput!): CostCode
  deleteCostCodes(where: [CostCodeWhereUniqueInput!]!): [CostCode]
  createJobNumber(data: JobNumberCreateInput!): JobNumber
  createJobNumbers(data: [JobNumberCreateInput!]!): [JobNumber]
  updateJobNumber(where: JobNumberWhereUniqueInput!, data: JobNumberUpdateInput!): JobNumber
  updateJobNumbers(data: [JobNumberUpdateArgs!]!): [JobNumber]
  deleteJobNumber(where: JobNumberWhereUniqueInput!): JobNumber
  deleteJobNumbers(where: [JobNumberWhereUniqueInput!]!): [JobNumber]
  createTimeClock(data: TimeClockCreateInput!): TimeClock
  createTimeClocks(data: [TimeClockCreateInput!]!): [TimeClock]
  updateTimeClock(where: TimeClockWhereUniqueInput!, data: TimeClockUpdateInput!): TimeClock
  updateTimeClocks(data: [TimeClockUpdateArgs!]!): [TimeClock]
  deleteTimeClock(where: TimeClockWhereUniqueInput!): TimeClock
  deleteTimeClocks(where: [TimeClockWhereUniqueInput!]!): [TimeClock]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  timeSheets(where: TimeSheetWhereInput! = {}, orderBy: [TimeSheetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimeSheetWhereUniqueInput): [TimeSheet!]
  timeSheet(where: TimeSheetWhereUniqueInput!): TimeSheet
  timeSheetsCount(where: TimeSheetWhereInput! = {}): Int
  employees(where: EmployeeWhereInput! = {}, orderBy: [EmployeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmployeeWhereUniqueInput): [Employee!]
  employee(where: EmployeeWhereUniqueInput!): Employee
  employeesCount(where: EmployeeWhereInput! = {}): Int
  costCodes(where: CostCodeWhereInput! = {}, orderBy: [CostCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CostCodeWhereUniqueInput): [CostCode!]
  costCode(where: CostCodeWhereUniqueInput!): CostCode
  costCodesCount(where: CostCodeWhereInput! = {}): Int
  jobNumbers(where: JobNumberWhereInput! = {}, orderBy: [JobNumberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobNumberWhereUniqueInput): [JobNumber!]
  jobNumber(where: JobNumberWhereUniqueInput!): JobNumber
  jobNumbersCount(where: JobNumberWhereInput! = {}): Int
  timeClocks(where: TimeClockWhereInput! = {}, orderBy: [TimeClockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimeClockWhereUniqueInput): [TimeClock!]
  timeClock(where: TimeClockWhereUniqueInput!): TimeClock
  timeClocksCount(where: TimeClockWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
